"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.VictoryHistogram = void 0;
var _react = _interopRequireDefault(require("react"));
var _victoryBar = require("victory-bar");
var _victoryCore = require("victory-core");
var _helperMethods = require("./helper-methods");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const fallbackProps = {
  width: 450,
  height: 300,
  padding: 50
};
const defaultData = [];

// eslint-disable-next-line @typescript-eslint/no-empty-interface

/**
 * Draw SVG histogram charts with React. VictoryHistogram is a composable component, so it doesn't include axes
 * Check out VictoryChart for complete histogram charts and more.
 */
class VictoryHistogramBase extends _react.default.Component {
  static animationWhitelist = ["data", "domain", "height", "padding", "style", "width"];
  static displayName = "VictoryHistogram";
  static role = "histogram";
  static defaultTransitions = {
    onLoad: {
      duration: 2000,
      before: () => ({
        _y: 0,
        _y1: 0,
        _y0: 0
      }),
      after: datum => ({
        _y: datum._y,
        _y1: datum._y1,
        _y0: datum._y0
      })
    },
    onExit: {
      duration: 500,
      before: () => ({
        _y: 0,
        yOffset: 0
      })
    },
    onEnter: {
      duration: 500,
      before: () => ({
        _y: 0,
        _y1: 0,
        _y0: 0
      }),
      after: datum => ({
        _y: datum._y,
        _y1: datum._y1,
        _y0: datum._y0
      })
    }
  };
  static getFormattedData() {
    return (0, _helperMethods.getFormattedData)(...arguments);
  }
  static defaultProps = {
    containerComponent: /*#__PURE__*/_react.default.createElement(_victoryCore.VictoryContainer, null),
    data: defaultData,
    dataComponent: /*#__PURE__*/_react.default.createElement(_victoryBar.Bar, null),
    groupComponent: /*#__PURE__*/_react.default.createElement("g", {
      role: "presentation"
    }),
    labelComponent: /*#__PURE__*/_react.default.createElement(_victoryCore.VictoryLabel, null),
    samples: 50,
    sortOrder: "ascending",
    standalone: true,
    theme: _victoryCore.VictoryTheme.grayscale
  };
  static getDomain(props, axis) {
    return (0, _helperMethods.getDomain)(props, axis);
  }
  static getData(props) {
    return (0, _helperMethods.getData)(props);
  }
  static getBaseProps(props) {
    return (0, _helperMethods.getBaseProps)(props, fallbackProps);
  }
  static expectedComponents = ["dataComponent", "labelComponent", "groupComponent", "containerComponent"];

  // Overridden in native versions
  shouldAnimate() {
    return !!this.props.animate;
  }
  render() {
    const {
      animationWhitelist,
      role
    } = VictoryHistogramBase;
    const props = _victoryCore.Helpers.modifyProps(this.props, fallbackProps, role);
    if (this.shouldAnimate()) {
      return this.animateComponent(props, animationWhitelist);
    }
    const children = this.renderData(props);
    const component = props.standalone ? this.renderContainer(props.containerComponent, children) : children;
    return _victoryCore.UserProps.withSafeUserProps(component, props);
  }
}
const VictoryHistogram = exports.VictoryHistogram = (0, _victoryCore.addEvents)(VictoryHistogramBase);