declare const Helpers: {
    onTouchEnd(): {
        target: string;
        mutation: () => {
            panning: boolean;
            originalPinchDistance: null;
        };
    }[];
    onTouchPinch(evt: any, targetProps: any, eventKey: any, ctx: any): {};
    getPinchDistance([a, b]: [any, any]): number;
    getScaleFactorNative(evt: any, props: any): number;
    scaleNative(currentDomain: any, evt: any, props: any, axis: any): any;
    checkDomainEquality(a: any, b: any): boolean;
    scale(currentDomain: any, evt: any, props: any, axis: any): any;
    getScaledDomain(currentDomain: any, factor: any, percent: any): number[];
    getMinimumDomain(point: any, props: any, axis: any): any[];
    zoommingOut(evt: any): boolean;
    getScaleFactor(evt: any): number;
    getScalePercent(evt: any, props: any, axis: any): number;
    getPosition(evt: any, props: any, originalDomain: any): import("victory-core").SVGCoordinateType;
    pan(currentDomain: any, originalDomain: any, delta: any): any;
    getDomainScale(domain: any, scale: any, axis: any): number;
    handleAnimation(ctx: any): number;
    getLastDomain(targetProps: any, originalDomain: any): any;
    getDomain(props: any): any;
    onMouseDown(evt: any, targetProps: any): {
        target: string;
        mutation: () => {
            startX: number;
            startY: number;
            panning: boolean;
            parentSVG: any;
            parentControlledProps: string[];
        };
    }[] | undefined;
    onMouseUp(evt: any, targetProps: any): {
        target: string;
        mutation: () => {
            panning: boolean;
        };
    }[] | undefined;
    onMouseLeave(evt: any, targetProps: any): {
        target: string;
        mutation: () => {
            panning: boolean;
        };
    }[] | undefined;
    onMouseMove(evt: any, targetProps: any, eventKey: any, ctx: any): {
        target: string;
        callback: number;
        mutation: () => {
            parentControlledProps: string[];
            startX: number;
            startY: number;
            parentSVG: any;
            currentDomain: {
                x: any;
                y: any;
            };
            originalDomain: any;
            cachedZoomDomain: any;
            zoomActive: boolean;
        };
    }[] | undefined;
    onWheel(evt: any, targetProps: any, eventKey: any, ctx: any): {
        target: string;
        callback: number;
        mutation: () => {
            currentDomain: {
                x: any;
                y: any;
            };
            originalDomain: any;
            cachedZoomDomain: any;
            parentControlledProps: string[];
            panning: boolean;
            zoomActive: any;
        };
    }[] | undefined;
};
declare const makeThrottledHandler: (handler: any) => (evt: any, ...otherParams: any[]) => any;
export { Helpers, makeThrottledHandler };
declare const _default: {
    onTouchStart: (evt: any, targetProps: any) => {
        target: string;
        mutation: () => {
            startX: number;
            startY: number;
            panning: boolean;
            parentSVG: any;
            parentControlledProps: string[];
        };
    }[] | undefined;
    onTouchEnd: () => {
        target: string;
        mutation: () => {
            panning: boolean;
            originalPinchDistance: null;
        };
    }[];
    onTouchMove: (evt: any, ...otherParams: any[]) => any;
    onTouchPinch: (evt: any, ...otherParams: any[]) => any;
};
export default _default;
//# sourceMappingURL=native-zoom-helpers.d.ts.map