"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.zoomContainerMixin = exports.VictoryZoomContainer = void 0;
var _flow2 = _interopRequireDefault(require("lodash/flow"));
var _react = _interopRequireDefault(require("react"));
var _victoryContainer = require("./victory-container");
var _victoryClipContainer = require("./victory-clip-container");
var _victoryZoomContainer = require("victory-zoom-container");
var _nativeZoomHelpers = _interopRequireDefault(require("../helpers/native-zoom-helpers"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function nativeZoomMixin(Base) {
  // @ts-expect-error "TS2545: A mixin class must have a constructor with a single rest parameter of type 'any[]'."
  return class VictoryNativeZoomContainer extends Base {
    // assign native specific defaultProps over web `VictoryZoomContainer` defaultProps
    static defaultProps = {
      ..._victoryZoomContainer.VictoryZoomContainer.defaultProps,
      clipContainerComponent: /*#__PURE__*/_react.default.createElement(_victoryClipContainer.VictoryClipContainer, null)
    };

    // overrides all web events with native specific events
    static defaultEvents(props) {
      const {
        disable
      } = props;
      return [{
        target: "parent",
        eventHandlers: {
          // eslint-disable-next-line max-params
          onTouchStart: (evt, targetProps) => {
            return disable ? {} : _nativeZoomHelpers.default.onTouchStart(evt, targetProps);
          },
          // eslint-disable-next-line max-params
          onTouchMove: (evt, targetProps, eventKey, ctx) => {
            return disable ? {} : _nativeZoomHelpers.default.onTouchMove(evt, targetProps, eventKey, ctx);
          },
          // eslint-disable-next-line max-params
          onTouchEnd: () => {
            return disable ? {} : _nativeZoomHelpers.default.onTouchEnd();
          },
          // eslint-disable-next-line max-params
          onTouchPinch: (evt, targetProps, eventKey, ctx) => {
            return disable ? {} : _nativeZoomHelpers.default.onTouchPinch(evt, targetProps, eventKey, ctx);
          }
        }
      }];
    }
  };
}
const combinedMixin = (0, _flow2.default)(_victoryZoomContainer.zoomContainerMixin, nativeZoomMixin);
const zoomContainerMixin = base => combinedMixin(base);
exports.zoomContainerMixin = zoomContainerMixin;
const VictoryZoomContainer = exports.VictoryZoomContainer = zoomContainerMixin(_victoryContainer.VictoryContainer);