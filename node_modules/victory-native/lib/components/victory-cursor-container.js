"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cursorContainerMixin = exports.VictoryCursorContainer = void 0;
var _flow2 = _interopRequireDefault(require("lodash/flow"));
var _react = _interopRequireDefault(require("react"));
var _victoryCursorContainer = require("victory-cursor-container");
var _victoryLabel = require("./victory-label");
var _victoryContainer = require("./victory-container");
var _lineSegment = require("./victory-primitives/line-segment");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function nativeCursorMixin(Base) {
  // @ts-expect-error "TS2545: A mixin class must have a constructor with a single rest parameter of type 'any[]'."
  return class VictoryNativeCursorContainer extends Base {
    static displayName = "VictoryCursorContainer";
    // assign native specific defaultProps over web `VictoryCursorContainer` defaultProps
    static defaultProps = {
      ..._victoryCursorContainer.VictoryCursorContainer.defaultProps,
      cursorLabelComponent: /*#__PURE__*/_react.default.createElement(_victoryLabel.VictoryLabel, null),
      cursorComponent: /*#__PURE__*/_react.default.createElement(_lineSegment.LineSegment, null)
    };

    // overrides all web events with native specific events
    static defaultEvents(props) {
      return [{
        target: "parent",
        eventHandlers: {
          onTouchStart: (evt, targetProps) => {
            return props.disable ? {} : _victoryCursorContainer.CursorHelpers.onMouseMove(evt, targetProps);
          },
          onTouchMove: (evt, targetProps) => {
            return props.disable ? {} : _victoryCursorContainer.CursorHelpers.onMouseMove(evt, targetProps);
          },
          onTouchEnd: (evt, targetProps) => {
            return props.disable ? {} : _victoryCursorContainer.CursorHelpers.onTouchEnd(evt, targetProps);
          }
        }
      }];
    }
  };
}
const combinedMixin = (0, _flow2.default)(_victoryCursorContainer.cursorContainerMixin, nativeCursorMixin);
const cursorContainerMixin = base => combinedMixin(base);
exports.cursorContainerMixin = cursorContainerMixin;
const VictoryCursorContainer = exports.VictoryCursorContainer = cursorContainerMixin(_victoryContainer.VictoryContainer);