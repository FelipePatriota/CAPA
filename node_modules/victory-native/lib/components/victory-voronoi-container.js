"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.voronoiContainerMixin = exports.VictoryVoronoiContainer = void 0;
var _flow2 = _interopRequireDefault(require("lodash/flow"));
var _react = _interopRequireDefault(require("react"));
var _victoryVoronoiContainer = require("victory-voronoi-container");
var _victoryContainer = require("./victory-container");
var _victoryTooltip = require("./victory-tooltip");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/* eslint-disable react/no-multi-comp */

function nativeVoronoiMixin(Base) {
  // @ts-expect-error "TS2545: A mixin class must have a constructor with a single rest parameter of type 'any[]'."
  return class VictoryNativeVoronoiContainer extends Base {
    // assign native specific defaultProps over web `VictoryVoronoiContainer` defaultProps
    static defaultProps = {
      ..._victoryVoronoiContainer.VictoryVoronoiContainer.defaultProps,
      activateData: true,
      activateLabels: true,
      labelComponent: /*#__PURE__*/_react.default.createElement(_victoryTooltip.VictoryTooltip, null),
      voronoiPadding: 5
    };

    // overrides all web events with native specific events
    static defaultEvents(props) {
      return [{
        target: "parent",
        eventHandlers: {
          onTouchStart: (evt, targetProps) => {
            return props.disable ? {} : _victoryVoronoiContainer.VoronoiHelpers.onMouseMove(evt, targetProps);
          },
          onTouchMove: (evt, targetProps) => {
            return props.disable ? {} : _victoryVoronoiContainer.VoronoiHelpers.onMouseMove(evt, targetProps);
          },
          onTouchEnd: (evt, targetProps) => {
            return props.disable ? {} : _victoryVoronoiContainer.VoronoiHelpers.onMouseLeave(evt, targetProps);
          }
        }
      }, {
        target: "data",
        eventHandlers: props.disable ? {} : {
          onTouchStart: () => null,
          onTouchMove: () => null,
          onTouchEnd: () => null
        }
      }];
    }
  };
}
const combinedMixin = (0, _flow2.default)(_victoryVoronoiContainer.voronoiContainerMixin, nativeVoronoiMixin);
const voronoiContainerMixin = base => combinedMixin(base);
exports.voronoiContainerMixin = voronoiContainerMixin;
const VictoryVoronoiContainer = exports.VictoryVoronoiContainer = voronoiContainerMixin(_victoryContainer.VictoryContainer);