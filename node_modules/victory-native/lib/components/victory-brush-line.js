"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.VictoryBrushLine = void 0;
var _get2 = _interopRequireDefault(require("lodash/get"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _reactNativeSvg = require("react-native-svg");
var _es = require("victory-brush-line/es");
var _lineSegment = require("./victory-primitives/line-segment");
var _nativeHelpers = _interopRequireDefault(require("../helpers/native-helpers"));
var _wrapCoreComponent = require("../helpers/wrap-core-component");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); } // ensure the selection component get native styles
const RectWithStyle = _ref => {
  let {
    style = {},
    ...otherProps
  } = _ref;
  return /*#__PURE__*/_react.default.createElement(_reactNativeSvg.Rect, _extends({}, otherProps, _nativeHelpers.default.getStyle(style)));
};
const yes = () => true;
const no = () => false;
const vblDefaultEvents = _es.VictoryBrushLine.defaultEvents;
class VictoryNativeBrushLine extends _es.VictoryBrushLine {
  static displayName = "VictoryNativeBrushLine";
  defaultEvents = function (props) {
    if (props.disable) return undefined;
    // refer to web victory brush line to see the events we're aliasing here
    // we're just remapping the existing default events to their mobile equivalent handlers
    const existingEventHandlers = vblDefaultEvents(props)?.[0].eventHandlers;
    return [{
      target: props.type,
      eventHandlers: {
        onTouchStart: existingEventHandlers?.onMouseDown,
        onTouchMove: existingEventHandlers?.onMouseMove,
        onTouchEnd: existingEventHandlers?.onMouseUp
      }
    }];
  };
  constructor(props) {
    super(props);
    this.panResponder = this.getResponder();
  }

  // mimics victory-container responders, except for comment below
  getResponder() {
    let shouldBlockNativeResponder = no;
    if (this.props && (this.props.allowDrag || this.props.allowDraw || this.props.allowResize)) {
      shouldBlockNativeResponder = yes;
    }
    return _reactNative.PanResponder.create({
      onStartShouldSetPanResponder: yes,
      onStartShouldSetPanResponderCapture: no,
      onMoveShouldSetPanResponder: yes,
      onMoveShouldSetPanResponderCapture: yes,
      onShouldBlockNativeResponder: shouldBlockNativeResponder,
      // prevent parent responder (the VictoryContainer) from stealing touches
      onPanResponderTerminationRequest: no,
      onPanResponderGrant: this.handleResponderGrant.bind(this),
      onPanResponderMove: this.handleResponderMove.bind(this),
      onPanResponderRelease: this.handleResponderEnd.bind(this),
      onPanResponderTerminate: this.handleResponderEnd.bind(this)
    });
  }
  callOptionalEventCallback(eventName, evt) {
    const callback = (0, _get2.default)(this.props.events, eventName);
    if (callback) {
      evt.persist(); // RN nativeEvent is reused. see https://fb.me/react-event-pooling
      callback(evt, this.props, "__unknownEventKey__", eventName);
    }
  }
  handleResponderGrant(evt) {
    if (this.props.onTouchStart) {
      this.props.onTouchStart(evt);
    }
    this.callOptionalEventCallback("onTouchStart", evt);
  }
  handleResponderMove(evt) {
    const {
      touches
    } = evt.nativeEvent;
    if (touches && touches.length === 2) {
      this.callOptionalEventCallback("onTouchPinch", evt);
    } else {
      this.callOptionalEventCallback("onTouchMove", evt);
    }
  }
  handleResponderEnd(evt) {
    if (this.props.onTouchEnd) {
      this.props.onTouchEnd(evt);
    }
    this.callOptionalEventCallback("onTouchEnd", evt);
  }
  render() {
    return /*#__PURE__*/_react.default.createElement(_reactNativeSvg.G, _extends({}, this.props.events, this.panResponder.panHandlers), this.renderLine(this.props), this.renderBrushArea(this.props), this.renderBrush(this.props), this.renderHandles(this.props));
  }
}
const VictoryBrushLine = exports.VictoryBrushLine = (0, _wrapCoreComponent.wrapCoreComponent)({
  Component: VictoryNativeBrushLine,
  defaultProps: {
    ...VictoryNativeBrushLine.defaultProps,
    brushComponent: /*#__PURE__*/_react.default.createElement(RectWithStyle, null),
    brushAreaComponent: /*#__PURE__*/_react.default.createElement(RectWithStyle, null),
    handleComponent: /*#__PURE__*/_react.default.createElement(RectWithStyle, null),
    groupComponent: /*#__PURE__*/_react.default.createElement(_reactNativeSvg.G, null),
    lineComponent: /*#__PURE__*/_react.default.createElement(_lineSegment.LineSegment, null)
  }
});