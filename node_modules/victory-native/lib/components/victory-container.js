"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.VictoryContainer = void 0;
var _get2 = _interopRequireDefault(require("lodash/get"));
var _react = _interopRequireDefault(require("react"));
var _reactNativeSvg = _interopRequireWildcard(require("react-native-svg"));
var _reactNative = require("react-native");
var _es = require("victory-core/es");
var _nativeHelpers = _interopRequireDefault(require("../helpers/native-helpers"));
var _portal = require("./victory-portal/portal");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
const yes = () => true;
const no = () => false;
class VictoryContainer extends _es.VictoryContainer {
  constructor(props) {
    super(props);
    this.panResponder = this.getResponder();
  }
  getResponder() {
    let shouldBlockNativeResponder = no;
    if (this.props && (this.props.allowDrag || this.props.allowDraw || this.props.allowResize || this.props.allowSelection || this.props.allowPan || this.props.allowZoom)) {
      shouldBlockNativeResponder = yes;
    }
    return _reactNative.PanResponder.create({
      onStartShouldSetPanResponder: yes,
      onStartShouldSetPanResponderCapture: no,
      onMoveShouldSetPanResponder: yes,
      onMoveShouldSetPanResponderCapture: yes,
      onShouldBlockNativeResponder: shouldBlockNativeResponder,
      onPanResponderTerminationRequest: yes,
      // User has started a touch move
      onPanResponderGrant: this.handleResponderGrant.bind(this),
      // Active touch or touches have moved
      onPanResponderMove: this.handleResponderMove.bind(this),
      // The user has released all touches
      onPanResponderRelease: this.handleResponderEnd.bind(this),
      // Another component has become the responder
      onPanResponderTerminate: this.handleResponderEnd.bind(this)
    });
  }
  callOptionalEventCallback(eventName, evt) {
    const callback = (0, _get2.default)(this.props.events, eventName);
    if (callback) {
      evt.persist(); // RN nativeEvent is reused. see https://fb.me/react-event-pooling
      callback(evt, this.props, "__unknownEventKey__", eventName);
    }
  }
  handleResponderGrant(evt) {
    if (this.props.onTouchStart) {
      this.props.onTouchStart(evt);
    }
    this.callOptionalEventCallback("onTouchStart", evt);
  }
  handleResponderMove(evt) {
    const {
      touches
    } = evt.nativeEvent;
    if (touches && touches.length === 2) {
      this.callOptionalEventCallback("onTouchPinch", evt);
    } else {
      this.callOptionalEventCallback("onTouchMove", evt);
    }
  }
  handleResponderEnd(evt) {
    if (this.props.onTouchEnd) {
      this.props.onTouchEnd(evt);
    }
    this.callOptionalEventCallback("onTouchEnd", evt);
  }

  // Overrides method in victory-core
  renderContainer(props, svgProps, style) {
    const {
      title,
      desc,
      className,
      width,
      height,
      portalZIndex,
      responsive,
      disableContainerEvents
    } = props;
    const children = this.getChildren(props);
    const dimensions = responsive ? {
      width: "100%",
      height: "100%"
    } : {
      width,
      height
    };
    const baseStyle = _nativeHelpers.default.getStyle(style, ["width", "height"]);
    const divStyle = Object.assign({}, baseStyle, {
      position: "relative"
    });
    const portalDivStyle = {
      zIndex: portalZIndex,
      position: "absolute",
      top: 0,
      left: 0
    };
    const portalSvgStyle = Object.assign({
      overflow: "visible"
    }, dimensions);
    const portalProps = {
      width,
      height,
      viewBox: svgProps.viewBox,
      style: portalSvgStyle
    };
    const handlers = disableContainerEvents ? {} : this.panResponder.panHandlers;
    return /*#__PURE__*/_react.default.createElement(_reactNative.View, _extends({}, handlers, {
      style: divStyle,
      pointerEvents: "box-none",
      className: className,
      ref: props.containerRef
    }, this.getOUIAProps(props)), /*#__PURE__*/_react.default.createElement(_reactNativeSvg.default, _extends({}, svgProps, {
      style: dimensions,
      accessible: props["aria-labelledby"] && title ? true : undefined,
      accessibilityLabel: props["aria-labelledby"] && title ? title : undefined,
      accessibilityHint: props["aria-describedby"] && desc ? desc : undefined
    }), /*#__PURE__*/_react.default.createElement(_reactNativeSvg.Rect, {
      x: 0,
      y: 0,
      width: width,
      height: height,
      fill: "none"
    }), title ? /*#__PURE__*/_react.default.createElement("title", {
      id: "title"
    }, title) : null, desc ? /*#__PURE__*/_react.default.createElement("desc", {
      id: "desc"
    }, desc) : null, children, /*#__PURE__*/_react.default.createElement(_reactNative.View, {
      style: portalDivStyle,
      pointerEvents: "box-none"
    }, /*#__PURE__*/_react.default.createElement(_portal.Portal, _extends({}, portalProps, {
      ref: this.savePortalRef
    })))));
  }
}
exports.VictoryContainer = VictoryContainer;