"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.brushContainerMixin = exports.VictoryBrushContainer = void 0;
var _flow2 = _interopRequireDefault(require("lodash/flow"));
var _react = _interopRequireDefault(require("react"));
var _reactNativeSvg = require("react-native-svg");
var _victoryBrushContainer = require("victory-brush-container");
var _victoryContainer = require("./victory-container");
var _nativeHelpers = _interopRequireDefault(require("../helpers/native-helpers"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
// ensure the selection component get native styles
const RectWithStyle = _ref => {
  let {
    style = {},
    ...otherProps
  } = _ref;
  return /*#__PURE__*/_react.default.createElement(_reactNativeSvg.Rect, _extends({}, otherProps, _nativeHelpers.default.getStyle(style)));
};
function nativeBrushMixin(Base) {
  // @ts-expect-error "TS2545: A mixin class must have a constructor with a single rest parameter of type 'any[]'."
  return class VictoryNativeBrushContainer extends Base {
    // eslint-disable-line max-len
    // assign native specific defaultProps over web `VictoryBrushContainer` defaultProps
    static defaultProps = {
      ..._victoryBrushContainer.VictoryBrushContainer.defaultProps,
      brushComponent: /*#__PURE__*/_react.default.createElement(RectWithStyle, null),
      handleComponent: /*#__PURE__*/_react.default.createElement(RectWithStyle, null)
    };

    // overrides all web events with native specific events
    static defaultEvents(props) {
      return [{
        target: "parent",
        eventHandlers: {
          onTouchStart: (evt, targetProps) => {
            if (props.disable) {
              return {};
            }
            _victoryBrushContainer.BrushHelpers.onGlobalMouseMove.cancel();
            return _victoryBrushContainer.BrushHelpers.onMouseDown(evt, targetProps);
          },
          onTouchMove: (evt, targetProps) => {
            return props.disable ? {} : _victoryBrushContainer.BrushHelpers.onGlobalMouseMove(evt, targetProps);
          },
          onTouchEnd: (evt, targetProps) => {
            if (props.disable) {
              return {};
            }
            _victoryBrushContainer.BrushHelpers.onGlobalMouseMove.cancel();
            return _victoryBrushContainer.BrushHelpers.onGlobalMouseUp(evt, targetProps);
          }
        }
      }];
    }
  };
}
const combinedMixin = (0, _flow2.default)(_victoryBrushContainer.brushContainerMixin, nativeBrushMixin);
const brushContainerMixin = base => combinedMixin(base);
exports.brushContainerMixin = brushContainerMixin;
const VictoryBrushContainer = exports.VictoryBrushContainer = brushContainerMixin(_victoryContainer.VictoryContainer);