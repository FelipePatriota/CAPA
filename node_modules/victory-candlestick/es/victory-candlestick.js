import React from "react";
import { Helpers, VictoryLabel, addEvents, VictoryContainer, VictoryTheme, DefaultTransitions, UserProps } from "victory-core";
import { Candle } from "./candle";
import { getDomain, getData, getBaseProps } from "./helper-methods";
/* eslint-disable no-magic-numbers */
const fallbackProps = {
  width: 450,
  height: 300,
  padding: 50,
  candleColors: {
    positive: "#ffffff",
    negative: "#252525"
  }
};
const options = {
  components: [{
    name: "lowLabels"
  }, {
    name: "highLabels"
  }, {
    name: "openLabels"
  }, {
    name: "closeLabels"
  }, {
    name: "labels"
  }, {
    name: "data"
  }, {
    name: "parent",
    index: "parent"
  }]
};
const defaultData = [{
  x: new Date(2016, 6, 1),
  open: 5,
  close: 10,
  high: 15,
  low: 0
}, {
  x: new Date(2016, 6, 2),
  open: 10,
  close: 15,
  high: 20,
  low: 5
}, {
  x: new Date(2016, 6, 3),
  open: 15,
  close: 20,
  high: 25,
  low: 10
}, {
  x: new Date(2016, 6, 4),
  open: 20,
  close: 25,
  high: 30,
  low: 15
}, {
  x: new Date(2016, 6, 5),
  open: 25,
  close: 30,
  high: 35,
  low: 20
}, {
  x: new Date(2016, 6, 6),
  open: 30,
  close: 35,
  high: 40,
  low: 25
}, {
  x: new Date(2016, 6, 7),
  open: 35,
  close: 40,
  high: 45,
  low: 30
}, {
  x: new Date(2016, 6, 8),
  open: 40,
  close: 45,
  high: 50,
  low: 35
}];
/* eslint-enable no-magic-numbers */
const datumHasXandY = datum => {
  return !Helpers.isNil(datum._x) && !Helpers.isNil(datum._y);
};

// eslint-disable-next-line @typescript-eslint/no-empty-interface

/**
 * VictoryCandlestick renders a dataset as a series of candlesticks.
 * VictoryCandlestick can be composed with VictoryChart to create candlestick charts.
 */
class VictoryCandlestickBase extends React.Component {
  static animationWhitelist = ["data", "domain", "height", "padding", "samples", "size", "style", "width"];
  static displayName = "VictoryCandlestick";
  static role = "candlestick";
  static defaultTransitions = DefaultTransitions.discreteTransitions();
  static defaultProps = {
    containerComponent: /*#__PURE__*/React.createElement(VictoryContainer, null),
    data: defaultData,
    dataComponent: /*#__PURE__*/React.createElement(Candle, null),
    groupComponent: /*#__PURE__*/React.createElement("g", {
      role: "presentation"
    }),
    labelComponent: /*#__PURE__*/React.createElement(VictoryLabel, null),
    highLabelComponent: /*#__PURE__*/React.createElement(VictoryLabel, null),
    lowLabelComponent: /*#__PURE__*/React.createElement(VictoryLabel, null),
    openLabelComponent: /*#__PURE__*/React.createElement(VictoryLabel, null),
    closeLabelComponent: /*#__PURE__*/React.createElement(VictoryLabel, null),
    samples: 50,
    sortOrder: "ascending",
    standalone: true,
    theme: VictoryTheme.grayscale
  };
  static getDomain(props, axis) {
    return getDomain(props, axis);
  }
  static getData(props) {
    return getData(props);
  }
  static getBaseProps(props) {
    return getBaseProps(props, fallbackProps);
  }
  static expectedComponents = ["openLabelComponent", "closeLabelComponent", "highLabelComponent", "lowLabelComponent", "dataComponent", "labelComponent", "groupComponent", "containerComponent"];

  // Overridden in native versions
  shouldAnimate() {
    return !!this.props.animate;
  }
  shouldRenderDatum = datum => {
    return !Helpers.isNil(datum._x) && !Helpers.isNil(datum._high) && !Helpers.isNil(datum._low) && !Helpers.isNil(datum._close) && !Helpers.isNil(datum._open);
  };
  renderCandleData(props, shouldRenderDatum) {
    if (shouldRenderDatum === void 0) {
      shouldRenderDatum = datumHasXandY;
    }
    const {
      dataComponent,
      labelComponent,
      groupComponent
    } = props;
    const types = ["close", "open", "low", "high"];
    if (!groupComponent) {
      throw new Error("VictoryCandlestick expects a groupComponent prop");
    }
    const children = [];
    if (dataComponent) {
      const dataComponents = this.dataKeys.reduce((validDataComponents, _dataKey, index) => {
        const dataProps = this.getComponentProps(dataComponent, "data", index);
        if (shouldRenderDatum(dataProps.datum)) {
          validDataComponents.push( /*#__PURE__*/React.cloneElement(dataComponent, dataProps));
        }
        return validDataComponents;
      }, []);
      children.push(...dataComponents);
    }
    const labelComponents = types.flatMap(type => this.dataKeys.map((key, index) => {
      const name = `${type}Labels`;
      const baseComponent = props[`${type}LabelComponent`];
      const labelProps = this.getComponentProps(baseComponent, name, index);
      if (labelProps.text !== undefined && labelProps.text !== null) {
        return /*#__PURE__*/React.cloneElement(baseComponent, labelProps);
      }
      return undefined;
    }).filter(comp => comp !== undefined));
    children.push(...labelComponents);
    if (labelComponent) {
      const labelsComponents = this.dataKeys.map((_dataKey, index) => {
        const labelProps = this.getComponentProps(labelComponent, "labels", index);
        if (labelProps.text !== undefined && labelProps.text !== null) {
          return /*#__PURE__*/React.cloneElement(labelComponent, labelProps);
        }
        return undefined;
      }).filter(comp => comp !== undefined);
      children.push(...labelsComponents);
    }
    return this.renderContainer(groupComponent, children);
  }
  render() {
    const {
      animationWhitelist,
      role
    } = VictoryCandlestick;
    const props = Helpers.modifyProps(this.props, fallbackProps, role);
    if (this.shouldAnimate()) {
      return this.animateComponent(props, animationWhitelist);
    }
    const children = this.renderCandleData(props, this.shouldRenderDatum);
    const component = props.standalone ? this.renderContainer(props.containerComponent, children) : children;
    return UserProps.withSafeUserProps(component, props);
  }
}
export const VictoryCandlestick = addEvents(VictoryCandlestickBase, options);