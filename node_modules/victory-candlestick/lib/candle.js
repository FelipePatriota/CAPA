"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Candle = void 0;
var _defaults2 = _interopRequireDefault(require("lodash/defaults"));
var _react = _interopRequireDefault(require("react"));
var _victoryCore = require("victory-core");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const getCandleWidth = (candleWidth, props) => {
  const {
    style
  } = props;
  if (candleWidth) {
    return _victoryCore.Helpers.isFunction(candleWidth) ? _victoryCore.Helpers.evaluateProp(candleWidth, props) : candleWidth;
  } else if (style.width) {
    return style.width;
  }
  return candleWidth;
};
const getCandleProps = (props, style) => {
  const {
    id,
    x,
    close,
    open,
    horizontal,
    candleWidth
  } = props;
  const candleLength = Math.abs(close - open);
  return {
    key: `${id}-candle`,
    style: _victoryCore.Helpers.omit(style, ["width"]),
    x: horizontal ? Math.min(open, close) : x - candleWidth / 2,
    y: horizontal ? x - candleWidth / 2 : Math.min(open, close),
    width: horizontal ? candleLength : candleWidth,
    height: horizontal ? candleWidth : candleLength
  };
};
const getHighWickProps = (props, style) => {
  const {
    horizontal,
    high,
    open,
    close,
    x,
    id
  } = props;
  return {
    key: `${id}-highWick`,
    style: _victoryCore.Helpers.omit(style, ["width"]),
    x1: horizontal ? high : x,
    x2: horizontal ? Math.max(open, close) : x,
    y1: horizontal ? x : high,
    y2: horizontal ? x : Math.min(open, close)
  };
};
const getLowWickProps = (props, style) => {
  const {
    horizontal,
    low,
    open,
    close,
    x,
    id
  } = props;
  return {
    key: `${id}-lowWick`,
    style: _victoryCore.Helpers.omit(style, ["width"]),
    x1: horizontal ? Math.min(open, close) : x,
    x2: horizontal ? low : x,
    y1: horizontal ? x : Math.max(open, close),
    y2: horizontal ? x : low
  };
};
const evaluateProps = props => {
  /**
   * Potential evaluated props of following must be evaluated in this order:
   * 1) `style`
   * 2) `cornerRadius`
   *
   * Everything else does not have to be evaluated in a particular order:
   * `ariaLabel`
   * `desc`
   * `id`
   * `tabIndex`
   */
  const style = _victoryCore.Helpers.evaluateStyle(Object.assign({
    stroke: "black"
  }, props.style), props);
  const candleWidth = getCandleWidth(props.candleWidth, Object.assign({}, props, {
    style
  }));
  const ariaLabel = _victoryCore.Helpers.evaluateProp(props.ariaLabel, props);
  const desc = _victoryCore.Helpers.evaluateProp(props.desc, props);
  const id = _victoryCore.Helpers.evaluateProp(props.id, props);
  const tabIndex = _victoryCore.Helpers.evaluateProp(props.tabIndex, props);
  return Object.assign({}, props, {
    ariaLabel,
    style,
    candleWidth,
    desc,
    id,
    tabIndex
  });
};
const defaultProps = {
  groupComponent: /*#__PURE__*/_react.default.createElement("g", null),
  lineComponent: /*#__PURE__*/_react.default.createElement(_victoryCore.Line, null),
  rectComponent: /*#__PURE__*/_react.default.createElement(_victoryCore.Rect, null),
  role: "presentation",
  shapeRendering: "auto"
};
const Candle = props => {
  const modifiedProps = evaluateProps((0, _defaults2.default)({}, props, defaultProps));
  const {
    ariaLabel,
    events,
    groupComponent,
    clipPath,
    rectComponent,
    lineComponent,
    role,
    shapeRendering,
    className,
    wickStrokeWidth,
    transform,
    style,
    desc,
    tabIndex
  } = modifiedProps;
  const wickStyle = (0, _defaults2.default)({
    strokeWidth: wickStrokeWidth
  }, style);
  const sharedProps = {
    ...events,
    "aria-label": ariaLabel,
    role,
    shapeRendering,
    className,
    transform,
    clipPath,
    desc,
    tabIndex
  };
  const candleProps = Object.assign(getCandleProps(modifiedProps, style), sharedProps);
  const highWickProps = Object.assign(getHighWickProps(modifiedProps, wickStyle), sharedProps);
  const lowWickProps = Object.assign(getLowWickProps(modifiedProps, wickStyle), sharedProps);
  return /*#__PURE__*/_react.default.cloneElement(groupComponent, {}, [/*#__PURE__*/_react.default.cloneElement(rectComponent, candleProps), /*#__PURE__*/_react.default.cloneElement(lineComponent, highWickProps), /*#__PURE__*/_react.default.cloneElement(lineComponent, lowWickProps)]);
};
exports.Candle = Candle;