import _defaults from "lodash/defaults";
import React from "react";
import { Helpers, ClipPath, Path, Circle, UserProps } from "victory-core";
const getVoronoiPath = props => {
  const {
    polygon
  } = props;
  return Array.isArray(polygon) && polygon.length ? `M ${props.polygon?.join("L")} Z` : "";
};
function evaluateProps(props) {
  /**
   * Potential evaluated props are:
   * `aria-label`
   * `id`
   * `size`
   * `style`
   * `tabIndex
   */
  const ariaLabel = Helpers.evaluateProp(props.ariaLabel, props);
  const id = Helpers.evaluateProp(props.id, props);
  const size = Helpers.evaluateProp(props.size, props);
  const style = Helpers.evaluateStyle(props.style, props);
  const tabIndex = Helpers.evaluateProp(props.tabIndex, props);
  return Object.assign({}, props, {
    ariaLabel,
    id,
    size,
    style,
    tabIndex
  });
}
const defaultProps = {
  pathComponent: /*#__PURE__*/React.createElement(Path, null),
  circleComponent: /*#__PURE__*/React.createElement(Circle, null),
  clipPathComponent: /*#__PURE__*/React.createElement(ClipPath, null),
  groupComponent: /*#__PURE__*/React.createElement("g", null),
  role: "presentation",
  shapeRendering: "auto"
};
export const Voronoi = initialProps => {
  const props = evaluateProps(_defaults({}, initialProps, defaultProps));
  const {
    ariaLabel,
    role,
    shapeRendering,
    className,
    events,
    transform,
    style,
    size,
    tabIndex
  } = props;
  const voronoiPath = getVoronoiPath(props);
  const sharedProps = {
    "aria-label": ariaLabel,
    className,
    role,
    shapeRendering,
    style,
    tabIndex,
    transform,
    ...events
  };
  const userProps = UserProps.getSafeUserProps(props);
  if (size) {
    const circle = /*#__PURE__*/React.cloneElement(props.circleComponent, {
      ...sharedProps,
      key: `${props.id}-circle-clip`,
      clipPath: `url(#${props.clipId})`,
      cx: props.x,
      cy: props.y,
      r: size
    });
    const voronoiClipPath = /*#__PURE__*/React.cloneElement(props.clipPathComponent, {
      key: `${props.id}-voronoi-clip`,
      clipId: props.clipId
    }, /*#__PURE__*/React.cloneElement(props.pathComponent, {
      d: voronoiPath,
      className
    }));
    return /*#__PURE__*/React.cloneElement(props.groupComponent, {}, [voronoiClipPath, circle]);
  }
  return /*#__PURE__*/React.cloneElement(props.pathComponent, {
    ...sharedProps,
    ...userProps,
    d: voronoiPath
  });
};