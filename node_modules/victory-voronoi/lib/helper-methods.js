"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "_internalD3Voronoi", {
  enumerable: true,
  get: function () {
    return _d3Voronoi.voronoi;
  }
});
exports.getBaseProps = void 0;
var _d3Voronoi = require("d3-voronoi");
var _victoryCore = require("victory-core");
// victory-vendor note: This module is still CommonJS, so not part of victory-vendor.

// Re-export for tests

const getVoronoi = (props, range, scale) => {
  const minRange = [Math.min(...range.x), Math.min(...range.y)];
  const maxRange = [Math.max(...range.x), Math.max(...range.y)];
  const angleAccessor = d => {
    const x = scale.x(d._x1 !== undefined ? d._x1 : d._x);
    return -1 * x + Math.PI / 2;
  };
  const xAccessor = d => {
    return props.horizontal ? scale.y(d._y1 !== undefined ? d._y1 : d._y) : scale.x(d._x1 !== undefined ? d._x1 : d._x);
  };
  const yAccessor = d => {
    return props.horizontal ? scale.x(d._x1 !== undefined ? d._x1 : d._x) : scale.y(d._y1 !== undefined ? d._y1 : d._y);
  };
  return (0, _d3Voronoi.voronoi)().x(d => props.polar ? angleAccessor(d) : xAccessor(d)).y(d => yAccessor(d)).extent([minRange, maxRange]);
};
const getCalculatedValues = props => {
  const defaultStyles = props.theme && props.theme.voronoi && props.theme.voronoi.style ? props.theme.voronoi.style : {};
  const style = _victoryCore.Helpers.getStyles(props.style, defaultStyles);
  const range = {
    x: _victoryCore.Helpers.getRange(props, "x"),
    y: _victoryCore.Helpers.getRange(props, "y")
  };
  const domain = {
    x: _victoryCore.Domain.getDomain(props, "x"),
    y: _victoryCore.Domain.getDomain(props, "y")
  };
  const scale = {
    x: _victoryCore.Scale.getBaseScale(props, "x").domain(domain.x).range(props.horizontal ? range.y : range.x),
    y: _victoryCore.Scale.getBaseScale(props, "y").domain(domain.y).range(props.horizontal ? range.x : range.y)
  };
  let data = _victoryCore.Data.getData(props);
  data = _victoryCore.Data.formatDataFromDomain(data, domain);
  // Manually remove data with null _x or _y values.
  // Otherwise, we hit null error in: d3-voronoi/src/Cell.js
  data = data.filter(datum => {
    if (datum._x === null) {
      return false;
    }
    if (datum._y === null) {
      return false;
    }
    return true;
  });
  const voronoi = getVoronoi(props, range, scale);
  const polygons = voronoi.polygons(data);
  const origin = props.polar ? props.origin || _victoryCore.Helpers.getPolarOrigin(props) : undefined;
  return {
    domain,
    data,
    scale,
    style,
    polygons,
    origin
  };
};
const getBaseProps = (initialProps, fallbackProps) => {
  const modifiedProps = _victoryCore.Helpers.modifyProps(initialProps, fallbackProps, "scatter");
  const props = Object.assign({}, modifiedProps, getCalculatedValues(modifiedProps));
  const {
    data,
    domain,
    events,
    height,
    origin,
    padding,
    polar,
    polygons,
    scale,
    sharedEvents,
    standalone,
    style,
    theme,
    width,
    labels,
    name
  } = props;
  const initialChildProps = {
    parent: {
      style: style.parent,
      scale,
      domain,
      data,
      standalone,
      height,
      width,
      theme,
      origin,
      polar,
      padding,
      name
    }
  };
  return data.reduce((childProps, datum, index) => {
    const polygon = polygons[index]?.filter(value => value !== "data");
    const eventKey = !_victoryCore.Helpers.isNil(datum.eventKey) ? datum.eventKey : index;
    const {
      x,
      y
    } = _victoryCore.Helpers.scalePoint(props, datum);
    const dataProps = {
      x,
      y,
      datum,
      data,
      index,
      scale,
      polygon,
      origin,
      size: props.size,
      style: style.data
    };
    childProps[eventKey] = {
      data: dataProps
    };
    const text = _victoryCore.LabelHelpers.getText(props, datum, index);
    if (text !== undefined && text !== null || labels && (events || sharedEvents)) {
      childProps[eventKey].labels = _victoryCore.LabelHelpers.getProps(props, index);
    }
    return childProps;
  }, initialChildProps);
};
exports.getBaseProps = getBaseProps;