import _defaults from "lodash/defaults";
/* eslint-disable max-statements */
import React from "react";
import { Helpers, Line, UserProps } from "victory-core";
const renderBorder = (props, error, type) => {
  const vertical = type === "right" || type === "left";
  return /*#__PURE__*/React.cloneElement(props.lineComponent, {
    ...props.events,
    role: props.role,
    shapeRendering: props.shapeRendering,
    className: props.className,
    style: props.style,
    transform: props.transform,
    key: `${props.id}-border-${type}`,
    x1: vertical ? error[type] : props.x - props.borderWidth,
    x2: vertical ? error[type] : props.x + props.borderWidth,
    y1: vertical ? props.y - props.borderWidth : error[type],
    y2: vertical ? props.y + props.borderWidth : error[type],
    "data-type": `border-${type}`
  });
};
const renderCross = (props, error, type) => {
  const vertical = type === "top" || type === "bottom";
  return /*#__PURE__*/React.cloneElement(props.lineComponent, {
    ...props.events,
    role: props.role,
    shapeRendering: props.shapeRendering,
    className: props.className,
    style: props.style,
    transform: props.transform,
    key: `${props.id}-cross-${type}`,
    x1: props.x,
    x2: vertical ? props.x : error[type],
    y1: props.y,
    y2: vertical ? error[type] : props.y,
    "data-type": `cross-${type}`
  });
};
const calculateError = props => {
  const {
    errorX,
    errorY
  } = props;
  const settings = {
    right: {
      error: errorX,
      errorIndex: 0
    },
    left: {
      error: errorX,
      errorIndex: 1
    },
    top: {
      error: errorY,
      errorIndex: 1
    },
    bottom: {
      error: errorY,
      errorIndex: 0
    }
  };
  const getError = direction => {
    const {
      error,
      errorIndex
    } = settings[direction];
    return error ? error[errorIndex] : undefined;
  };
  const result = ["right", "left", "top", "bottom"].reduce((memo, dir) => {
    memo[dir] = getError(dir);
    return memo;
  }, {});
  return result;
};
const evaluateProps = props => {
  /**
   * Potential evaluated props are:
   * `ariaLabel`
   * `id`
   * `style`
   * `tabIndex`
   */
  const ariaLabel = Helpers.evaluateProp(props.ariaLabel, props);
  const id = Helpers.evaluateProp(props.id, props);
  const style = Helpers.evaluateStyle(Object.assign({
    stroke: "black"
  }, props.style), props);
  const tabIndex = Helpers.evaluateProp(props.tabIndex, props);
  return Object.assign({}, props, {
    ariaLabel,
    id,
    style,
    tabIndex
  });
};

// ErrorProps for calculateError

// eslint-disable-next-line @typescript-eslint/no-empty-interface

const defaultProps = {
  groupComponent: /*#__PURE__*/React.createElement("g", null),
  lineComponent: /*#__PURE__*/React.createElement(Line, null),
  role: "presentation",
  shapeRendering: "auto"
};
export const ErrorBar = initialProps => {
  const props = evaluateProps(_defaults({}, initialProps, defaultProps));
  const {
    groupComponent
  } = props;
  const userProps = UserProps.getSafeUserProps(props);
  const {
    tabIndex,
    ariaLabel
  } = props;
  const error = calculateError(props);
  const children = [error.right ? renderBorder(props, error, "right") : null, error.left ? renderBorder(props, error, "left") : null, error.bottom ? renderBorder(props, error, "bottom") : null, error.top ? renderBorder(props, error, "top") : null, error.right ? renderCross(props, error, "right") : null, error.left ? renderCross(props, error, "left") : null, error.bottom ? renderCross(props, error, "bottom") : null, error.top ? renderCross(props, error, "top") : null].filter(Boolean);
  return /*#__PURE__*/React.cloneElement(groupComponent, {
    tabIndex,
    "aria-label": ariaLabel,
    ...userProps
  }, children);
};